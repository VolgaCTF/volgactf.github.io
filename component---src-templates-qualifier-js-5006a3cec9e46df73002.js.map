{"version":3,"file":"component---src-templates-qualifier-js-5006a3cec9e46df73002.js","mappings":"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","sources":["webpack://volgactf-site/./src/components/final/scoreboard.js","webpack://volgactf-site/./src/components/seo/og.js","webpack://volgactf-site/./src/components/seo/seo.js","webpack://volgactf-site/./src/templates/qualifier.js"],"sourcesContent":["import React from \"react\";\nimport {useTranslation} from \"gatsby-plugin-react-i18next\";\n\nconst Scoreboard = ({scoreboard}) => {\n    const {t} = useTranslation()\n    return (\n        <div className=\"table-scroll\">\n            <table className=\"unstriped\">\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>{t(\"scoreboard_team\")}</th>\n                    <th>{t(\"scoreboard_score\")}</th>\n                </tr>\n                </thead>\n                <tbody>\n                {scoreboard.map(team =>\n                    <tr key={team.pos}>\n                        <td>{team.pos}</td>\n                        <td>{team.team}</td>\n                        <td>{team.score < 1 && team.score > 0 ? (team.score * 100).toFixed(2) + \"%\" : team.score}</td>\n                    </tr>)}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Scoreboard\n","import React from \"react\";\nimport {Helmet} from \"gatsby-plugin-react-i18next\";\n\nconst OpenGraph = ({locale, url, title, description, image, twitter}) => (\n    <Helmet>\n            <meta property=\"og:locale\" content={locale}/>\n            <meta property=\"og:url\" content={url}/>\n            <meta property=\"og:type\" content=\"website\"/>\n            <meta property=\"og:title\" content={title}/>\n            <meta property=\"og:description\" content={description}/>\n            <meta property=\"og:image\" content={image}/>\n            <meta property=\"og:image:alt\" content={description}/>\n            <meta property=\"twitter:card\" content=\"summary\"/>\n            <meta property=\"twitter:site\" content={twitter}/>\n            <meta property=\"twitter:title\" content={title}/>\n            <meta property=\"twitter:description\" content={description}/>\n            <meta property=\"twitter:image\" content={image}/>\n            <meta name=\"twitter:image:alt\" content={description}/>\n    </Helmet>\n)\n\nexport default OpenGraph\n","import React from \"react\";\nimport {Helmet} from \"gatsby-plugin-react-i18next\";\nimport {graphql, useStaticQuery} from \"gatsby\";\nimport OpenGraph from \"./og\";\n\nconst Seo = ({title, description, pathname, lang, ctf, metaYandexVerification}) => {\n    const {site} = useStaticQuery(query)\n    const {\n        siteMetadata: {\n            siteUrl,\n            defaultTitle,\n            defaultDescription,\n            banner,\n            twitter\n        }\n    } = site\n\n    const seo = {\n        title: title ? `${defaultTitle}::${title}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${banner}`,\n        url: `${siteUrl}${pathname}`\n    }\n\n    let schemaEvent = null\n\n    if (ctf) {\n        schemaEvent = {\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Event\",\n            name: title,\n            startDate: ctf.startDate,\n            endDate: ctf.endDate,\n            eventAttendanceMode: \"https://schema.org/OfflineEventAttendanceMode\",\n            eventStatus: \"https://schema.org/EventScheduled\",\n            location: [{\n                \"@type\": \"VirtualLocation\",\n                url: seo.url\n            }, {\n                \"@type\": \"Place\",\n                name: \"Lotte Hotel Samara\",\n                address: {\n                    \"@type\": \"PostalAddress\",\n                    addressCountry: \"RU\",\n                    addressRegion: \"Самарская область\",\n                    addressLocality: \"Самара\",\n                    streetAddress: \"ул. Самарская, 110\",\n                    postalCode: \"443041\"\n                }\n            }],\n            image: [\n                seo.image\n            ],\n            description: seo.description,\n            organizer: {\n                \"@type\": \"Organization\",\n                name: defaultTitle,\n                url: siteUrl\n            }\n        }\n    }\n\n    return (\n        <>\n            <Helmet title={seo.title} defer={false}>\n                <html lang={lang} prefix=\"og: http://ogp.me/ns#\"/>\n                <meta name=\"description\" content={seo.description}/>\n                <meta name=\"image\" content={seo.image}/>\n                {metaYandexVerification && <meta name=\"yandex-verification\" content={metaYandexVerification}/>}\n                {ctf && <script type=\"application/ld+json\">{JSON.stringify(schemaEvent)}</script>}\n            </Helmet>\n            <OpenGraph\n                title={title}\n                description={seo.description}\n                url={seo.url}\n                image={seo.image}\n                twitter={twitter}\n                locale={lang}/>\n        </>\n    )\n}\n\nexport default Seo\n\nconst query = graphql`\n    query SEO\n    {\n        site\n        {\n            siteMetadata\n            {\n                siteUrl\n                defaultTitle: title\n                defaultDescription: description\n                banner\n                twitter\n            }\n        }\n    }\n`\n","import React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {useI18next} from \"gatsby-plugin-react-i18next\";\nimport Scoreboard from \"../components/final/scoreboard\";\nimport Seo from \"../components/seo/seo\";\n\nconst Qualifier = ({data, location}) => {\n    const {t, language} = useI18next()\n    const title = data.ctfJson.title\n    const titleHeader = title.toUpperCase()\n    const text = data.ctfJson.ctfText[language]\n    const report = data.ctfJson.report\n    const signup = data.ctfJson.signup\n    const scoreboard = data.ctfJson.scoreboard\n    return (\n        <>\n            <Seo lang={language} description={text} title={title} pathname={location.pathname}/>\n            <section className=\"welcome bg-first\">\n                <div className=\"grid-x\">\n                    <div className=\"large-offset-1 large-3 cell cell-text\">\n                        <h1>{titleHeader}</h1>\n                        {text}\n                        <hr/>\n                        {signup && signup.href && (\n                            <a href={signup.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <strong>{signup.text[language]}</strong>\n                            </a>\n                        )}\n                    </div>\n                </div>\n            </section>\n            <section>\n                {report && report.href && (\n                    <div className=\"grid-x\">\n                        <div className=\"large-offset-1 large-4 cell cell-text\">\n                            <h1>{t('report_header')}</h1>\n                        </div>\n                        <div className=\"large-offset-1 large-10 cell cell-text\">\n                            <a href={report.href} target=\"_blank\"\n                               rel=\"noreferrer noopener\">{report.text[language]}</a>\n                        </div>\n                    </div>\n                )}\n            </section>\n            <section>\n                {scoreboard && (\n                    <div className=\"grid-x\">\n                        <div className=\"large-offset-1 large-4 cell cell-text\">\n                            <h1>{t('scoreboard_header')}</h1>\n                        </div>\n                        <div className=\"large-offset-1 large-10 cell cell-text\">\n                            <Scoreboard scoreboard={scoreboard}/>\n                        </div>\n                    </div>\n                )}\n            </section>\n        </>\n    )\n}\n\nexport const query = graphql`\n    query Qualifier($id:String!, $language: String!){\n        locales: allLocale(filter: {language: {eq: $language}}){\n            edges{\n                node{\n                    ns\n                    data\n                    language\n                }\n            }\n        }\n        ctfJson(id: {eq: $id}){\n            title\n            ctfText{\n                en\n                ru\n            }\n            signup{\n                href\n                text{\n                    en\n                    ru\n                }\n            }\n            report{\n                href\n                text{\n                    en\n                    ru\n                }\n            }\n            scoreboard{\n                pos\n                score\n                team\n            }\n        }\n    }\n`\n\nexport default Qualifier\n"],"names":["scoreboard","t","useTranslation","className","map","team","key","pos","score","toFixed","locale","url","title","description","image","twitter","Helmet","property","content","name","pathname","lang","ctf","metaYandexVerification","useStaticQuery","query","site","siteMetadata","siteUrl","defaultTitle","defaultDescription","banner","seo","schemaEvent","startDate","endDate","eventAttendanceMode","eventStatus","location","address","addressCountry","addressRegion","addressLocality","streetAddress","postalCode","organizer","defer","prefix","type","JSON","stringify","data","useI18next","language","ctfJson","titleHeader","toUpperCase","text","ctfText","report","signup","href","target","rel"],"sourceRoot":""}