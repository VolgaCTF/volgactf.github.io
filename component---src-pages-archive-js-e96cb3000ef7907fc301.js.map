{"version":3,"file":"component---src-pages-archive-js-e96cb3000ef7907fc301.js","mappings":"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","sources":["webpack://volgactf-site/./src/components/seo/og.js","webpack://volgactf-site/./src/components/seo/seo.js","webpack://volgactf-site/./src/components/archive/archiveList.js","webpack://volgactf-site/./src/pages/archive.js"],"sourcesContent":["import React from \"react\";\nimport {Helmet} from \"gatsby-plugin-react-i18next\";\n\nconst OpenGraph = ({locale, url, title, description, image, twitter}) => (\n    <Helmet>\n            <meta property=\"og:locale\" content={locale}/>\n            <meta property=\"og:url\" content={url}/>\n            <meta property=\"og:type\" content=\"website\"/>\n            <meta property=\"og:title\" content={title}/>\n            <meta property=\"og:description\" content={description}/>\n            <meta property=\"og:image\" content={image}/>\n            <meta property=\"og:image:alt\" content={description}/>\n            <meta property=\"twitter:card\" content=\"summary\"/>\n            <meta property=\"twitter:site\" content={twitter}/>\n            <meta property=\"twitter:title\" content={title}/>\n            <meta property=\"twitter:description\" content={description}/>\n            <meta property=\"twitter:image\" content={image}/>\n            <meta name=\"twitter:image:alt\" content={description}/>\n    </Helmet>\n)\n\nexport default OpenGraph\n","import React from \"react\";\nimport {Helmet} from \"gatsby-plugin-react-i18next\";\nimport {graphql, useStaticQuery} from \"gatsby\";\nimport OpenGraph from \"./og\";\n\nconst Seo = ({title, description, pathname, lang, ctf, metaYandexVerification}) => {\n    const {site} = useStaticQuery(query)\n    const {\n        siteMetadata: {\n            siteUrl,\n            defaultTitle,\n            defaultDescription,\n            banner,\n            twitter\n        }\n    } = site\n\n    const seo = {\n        title: title ? `${defaultTitle}::${title}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${banner}`,\n        url: `${siteUrl}${pathname}`\n    }\n\n    let schemaEvent = null\n\n    if (ctf) {\n        schemaEvent = {\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Event\",\n            name: title,\n            startDate: ctf.startDate,\n            endDate: ctf.endDate,\n            eventAttendanceMode: \"https://schema.org/OfflineEventAttendanceMode\",\n            eventStatus: \"https://schema.org/EventScheduled\",\n            location: [{\n                \"@type\": \"VirtualLocation\",\n                url: seo.url\n            }, {\n                \"@type\": \"Place\",\n                name: \"Lotte Hotel Samara\",\n                address: {\n                    \"@type\": \"PostalAddress\",\n                    addressCountry: \"RU\",\n                    addressRegion: \"Самарская область\",\n                    addressLocality: \"Самара\",\n                    streetAddress: \"ул. Самарская, 110\",\n                    postalCode: \"443041\"\n                }\n            }],\n            image: [\n                seo.image\n            ],\n            description: seo.description,\n            organizer: {\n                \"@type\": \"Organization\",\n                name: defaultTitle,\n                url: siteUrl\n            }\n        }\n    }\n\n    return (\n        <>\n            <Helmet title={seo.title} defer={false}>\n                <html lang={lang} prefix=\"og: http://ogp.me/ns#\"/>\n                <meta name=\"description\" content={seo.description}/>\n                <meta name=\"image\" content={seo.image}/>\n                {metaYandexVerification && <meta name=\"yandex-verification\" content={metaYandexVerification}/>}\n                {ctf && <script type=\"application/ld+json\">{JSON.stringify(schemaEvent)}</script>}\n            </Helmet>\n            <OpenGraph\n                title={title}\n                description={seo.description}\n                url={seo.url}\n                image={seo.image}\n                twitter={twitter}\n                locale={lang}/>\n        </>\n    )\n}\n\nexport default Seo\n\nconst query = graphql`\n    query SEO\n    {\n        site\n        {\n            siteMetadata\n            {\n                siteUrl\n                defaultTitle: title\n                defaultDescription: description\n                banner\n                twitter\n            }\n        }\n    }\n`\n","import React from \"react\";\nimport {Link, useI18next} from \"gatsby-plugin-react-i18next\";\n\nconst ArchiveList = ({elements}) => {\n    const {language} = useI18next()\n    return (\n        <ul>\n            {elements.map(e => (\n                <li key={e.title}>\n                    <Link to={e.slug} language={language}>{e.title}</Link>\n                    <a href={e.ctfTimeHref} target=\"_blank\" rel=\"noreferrer noopener\">&nbsp; (CTFtime)</a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default ArchiveList\n","import React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {useI18next} from \"gatsby-plugin-react-i18next\";\nimport ArchiveList from \"../components/archive/archiveList\";\nimport Seo from \"../components/seo/seo\";\n\nconst Archive = ({data, location}) => {\n    const {t, language} = useI18next()\n    const ctfs = data.allCtfJson.nodes\n    return (\n        <>\n            <Seo title={t('archive_title')} lang={language} description={t(\"archive_text\")}\n                 pathname={location.pathname}/>\n            <section>\n                <div className=\"grid-x\">\n                    <div className=\"large-offset-1 large-10 cell cell-text\">\n                        <h1>{t(\"archive_header\")}</h1>\n                        {t(\"archive_text\")}\n                        <hr/>\n                        <ArchiveList elements={ctfs}/>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default Archive\n\nexport const query = graphql`\n    query($language: String!){\n        allCtfJson(sort: {fields: [startDate],order: [ASC]},filter: {current: {eq: false}}){\n            nodes{\n                title\n                slug\n                ctfTimeHref\n            }\n        }\n        locales: allLocale(filter: {language: {eq: $language}}){\n            edges{\n                node{\n                    ns\n                    data\n                    language\n                }\n            }\n        }\n    }\n`\n"],"names":["locale","url","title","description","image","twitter","Helmet","property","content","name","pathname","lang","ctf","metaYandexVerification","useStaticQuery","query","site","siteMetadata","siteUrl","defaultTitle","defaultDescription","banner","seo","schemaEvent","startDate","endDate","eventAttendanceMode","eventStatus","location","address","addressCountry","addressRegion","addressLocality","streetAddress","postalCode","organizer","defer","prefix","type","JSON","stringify","elements","language","useI18next","map","e","key","Link","to","slug","href","ctfTimeHref","target","rel","data","t","ctfs","allCtfJson","nodes","className"],"sourceRoot":""}